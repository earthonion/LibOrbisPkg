name: CI & Release

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  pull_request:

permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_NOLOGO: true
  CONFIGURATION: Release

jobs:
  compute-version:
    runs-on: ubuntu-latest
    outputs:
      display: ${{ steps.ver.outputs.display }}
      semver:  ${{ steps.ver.outputs.semver }}
    steps:
      - name: Compute versions
        id: ver
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            DISPLAY="${GITHUB_REF_NAME}"
            SEMVER="${GITHUB_REF_NAME#v}"
          else
            BR="${GITHUB_REF_NAME//[^0-9A-Za-z.-]/.}"
            DISPLAY="${BR}"
            SEMVER="0.0.0-${BR}.${GITHUB_RUN_NUMBER}"
          fi
          echo "display=$DISPLAY" >> $GITHUB_OUTPUT
          echo "semver=$SEMVER"  >> $GITHUB_OUTPUT

  # --- Package LibOrbisPkg.Core (never touches full .sln) ---
  core-pack:
    name: Package LibOrbisPkg.Core
    runs-on: ubuntu-latest
    needs: compute-version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore (LibOrbisPkg.Core.csproj)
        run: dotnet restore "LibOrbisPkg.Core/LibOrbisPkg.Core.csproj"
      - name: Build Core
        run: dotnet build "LibOrbisPkg.Core/LibOrbisPkg.Core.csproj" -c ${{ env.CONFIGURATION }} --no-restore -p:Version=${{ needs.compute-version.outputs.semver }}
      - name: Stage Core files
        run: |
          mkdir -p out/core/net8.0
          cp LibOrbisPkg.Core/bin/${{ env.CONFIGURATION }}/net8.0/LibOrbisPkg.Core.dll out/core/net8.0/
          test -f LibOrbisPkg.Core/bin/${{ env.CONFIGURATION }}/net8.0/LibOrbisPkg.Core.xml && cp LibOrbisPkg.Core/bin/${{ env.CONFIGURATION }}/net8.0/LibOrbisPkg.Core.xml out/core/net8.0/ || true
          test -f LibOrbisPkg.Core/bin/${{ env.CONFIGURATION }}/net8.0/LibOrbisPkg.Core.pdb && cp LibOrbisPkg.Core/bin/${{ env.CONFIGURATION }}/net8.0/LibOrbisPkg.Core.pdb out/core/net8.0/ || true
      - name: Zip Core
        run: |
          cd out/core
          zip -r ../LibOrbisPkg.Core-${{ needs.compute-version.outputs.display }}-net8.0.zip net8.0
      - name: Upload Core zip
        uses: actions/upload-artifact@v4
        with:
          name: LibOrbisPkg.Core-${{ needs.compute-version.outputs.display }}-net8.0.zip
          path: out/LibOrbisPkg.Core-${{ needs.compute-version.outputs.display }}-net8.0.zip

  # --- Package PkgTool per-RID (never touches full .sln) ---
  pkgtool:
    name: PkgTool (${{ matrix.os }} | ${{ matrix.rid }})
    runs-on: ${{ matrix.os }}
    needs: compute-version
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest   # Linux
            rid: linux-x64
          - os: ubuntu-latest
            rid: linux-arm64
          - os: macos-latest    # macOS
            rid: osx-x64
          - os: macos-latest
            rid: osx-arm64
          - os: windows-latest  # Windows
            rid: win-x64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore (PkgTool.Core.csproj)
        run: dotnet restore "PkgTool.Core/PkgTool.Core.csproj"

      - name: Publish PkgTool.Core (Unix)
        if: runner.os != 'Windows'
        run: |
          dotnet publish "PkgTool.Core/PkgTool.Core.csproj" \
            -c ${{ env.CONFIGURATION }} \
            -r ${{ matrix.rid }} \
            --no-self-contained \
            -p:Version=${{ needs.compute-version.outputs.semver }} \
            -o out/pkgtool/${{ matrix.rid }}

      - name: Publish PkgTool.Core (Windows)
        if: runner.os == 'Windows'
        run: >
          dotnet publish PkgTool.Core/PkgTool.Core.csproj
          -c $env:CONFIGURATION
          -r ${{ matrix.rid }}
          --no-self-contained
          -p:Version=${{ needs.compute-version.outputs.semver }}
          -o out/pkgtool/${{ matrix.rid }}

      - name: Zip (Unix)
        if: runner.os != 'Windows'
        run: |
          cd out/pkgtool/${{ matrix.rid }}
          zip -r "../../../PkgTool-${{ needs.compute-version.outputs.display }}-${{ matrix.rid }}.zip" .

      - name: Zip (Windows)
        if: runner.os == 'Windows'
        run: |
          powershell -NoProfile -Command "Compress-Archive -Path out/pkgtool/${{ matrix.rid }}/* -DestinationPath out/PkgTool-${{ needs.compute-version.outputs.display }}-${{ matrix.rid }}.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: PkgTool-${{ needs.compute-version.outputs.display }}-${{ matrix.rid }}.zip
          path: out/PkgTool-${{ needs.compute-version.outputs.display }}-${{ matrix.rid }}.zip

  # --- Windows-only: full solution (PkgEditor & anything Windows-targeted) ---
  pkgeditor:
    name: PkgEditor (Windows GUI)
    runs-on: windows-latest
    needs: compute-version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore (full solution)
        run: dotnet restore "LibOrbisPkg.sln"
      - name: Build GUI
        run: dotnet build "LibOrbisPkg.sln" -c ${{ env.CONFIGURATION }} --no-restore -p:Version=${{ needs.compute-version.outputs.semver }}
      - name: Publish PkgEditor (win-x64)
        run: dotnet publish "PkgEditor/PkgEditor.csproj" -c ${{ env.CONFIGURATION }} -r win-x64 --no-self-contained -p:Version=${{ needs.compute-version.outputs.semver }} -o out/pkgeditor/win-x64
      - name: Zip GUI
        run: powershell -NoProfile -Command "Compress-Archive -Path out/pkgeditor/win-x64/* -DestinationPath out/PkgEditor-${{ needs.compute-version.outputs.display }}-windows-x64.zip"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: PkgEditor-${{ needs.compute-version.outputs.display }}-windows-x64.zip
          path: out/PkgEditor-${{ needs.compute-version.outputs.display }}-windows-x64.zip

  # --- Publish Release only for tags ---
  # --- Publish assets to GitHub Releases ---
release:
  name: Publish GitHub Release
  runs-on: ubuntu-latest
  needs: [core-pack, pkgtool, pkgeditor]

  steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: List files
      run: find dist -type f -maxdepth 3 -print

    # Tagged release: vX.Y.Z -> normal release
    - name: Create/Update Tagged Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/**/PkgTool-*.zip
          dist/**/LibOrbisPkg.Core-*.zip
          dist/**/PkgEditor-*.zip
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Nightly prerelease on non-tags: keeps overwriting "nightly"
    - name: Create/Update Nightly Prerelease
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: nightly
        name: Nightly build
        body: "Automated build from `${{ github.ref_name }}` @ ${{ github.sha }}"
        files: |
          dist/**/PkgTool-*.zip
          dist/**/LibOrbisPkg.Core-*.zip
          dist/**/PkgEditor-*.zip
        prerelease: true
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}